
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Aug 19 10:10:39 CST 2025
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Aug 19 10:10:39 CST 2025
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\015\005\000\002\015\004\000\002\016\007\000" +
    "\002\017\007\000\002\017\007\000\002\026\005\000\002" +
    "\026\005\000\002\026\006\000\002\022\003\000\002\022" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\005\000\002\003\004\000\002\023\007\000" +
    "\002\023\007\000\002\023\007\000\002\023\006\000\002" +
    "\024\005\000\002\024\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\005\000\002\025\004" +
    "\000\002\004\005\000\002\004\007\000\002\004\007\000" +
    "\002\004\006\000\002\004\006\000\002\004\007\000\002" +
    "\004\007\000\002\004\011\000\002\004\011\000\002\004" +
    "\010\000\002\004\010\000\002\004\006\000\002\006\007" +
    "\000\002\007\011\000\002\010\007\000\002\011\011\000" +
    "\002\012\007\000\002\014\012\000\002\014\011\000\002" +
    "\005\005\000\002\005\004\000\002\005\004\000\002\013" +
    "\003\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\006\000\002\013\007\000\002\020\011\000" +
    "\002\020\007\000\002\021\003\000\002\021\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\012\007\011\011\007\012\004\017\006\001" +
    "\002\000\004\051\270\001\002\000\004\002\ufffd\001\002" +
    "\000\004\047\026\001\002\000\004\051\022\001\002\000" +
    "\004\002\021\001\002\000\004\010\020\001\002\000\014" +
    "\002\ufffc\007\015\011\007\012\004\017\006\001\002\000" +
    "\004\002\ufffe\001\002\000\004\002\uffff\001\002\000\004" +
    "\010\017\001\002\000\004\002\000\001\002\000\014\002" +
    "\ufffb\007\ufffb\011\ufffb\012\ufffb\017\ufffb\001\002\000\014" +
    "\002\ufffa\007\ufffa\011\ufffa\012\ufffa\017\ufffa\001\002\000" +
    "\004\002\001\001\002\000\004\042\023\001\002\000\006" +
    "\012\004\017\006\001\002\000\004\043\025\001\002\000" +
    "\004\002\ufff9\001\002\000\004\040\027\001\002\000\004" +
    "\041\030\001\002\000\004\042\031\001\002\000\032\003" +
    "\051\013\043\014\053\015\057\016\050\017\054\020\044" +
    "\021\047\023\052\024\055\025\033\051\037\001\002\000" +
    "\006\002\ufff7\043\ufff7\001\002\000\004\040\237\001\002" +
    "\000\032\003\uffe9\013\uffe9\014\uffe9\015\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\023\uffe9\024\uffe9\025\uffe9\043\uffe9\051\uffe9" +
    "\001\002\000\032\003\uffef\013\uffef\014\uffef\015\uffef\017" +
    "\uffef\020\uffef\021\uffef\023\uffef\024\uffef\025\uffef\043\uffef" +
    "\051\uffef\001\002\000\032\003\234\013\043\014\053\015" +
    "\057\017\054\020\044\021\047\023\052\024\055\025\033" +
    "\043\230\051\037\001\002\000\004\040\216\001\002\000" +
    "\032\003\uffed\013\uffed\014\uffed\015\uffed\017\uffed\020\uffed" +
    "\021\uffed\023\uffed\024\uffed\025\uffed\043\uffed\051\uffed\001" +
    "\002\000\032\003\uffe2\013\uffe2\014\uffe2\015\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\023\uffe2\024\uffe2\025\uffe2\043\uffe2\051" +
    "\uffe2\001\002\000\032\003\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\023\uffeb\024\uffeb\025\uffeb\043" +
    "\uffeb\051\uffeb\001\002\000\004\040\204\001\002\000\004" +
    "\051\161\001\002\000\032\003\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\043\uffe7\051\uffe7\001\002\000\032\003\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\017\uffe3\020\uffe3\021\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\043\uffe3\051\uffe3\001\002\000\004\040\153\001" +
    "\002\000\006\052\062\053\061\001\002\000\006\043\147" +
    "\050\150\001\002\000\004\042\031\001\002\000\004\040" +
    "\135\001\002\000\006\036\117\051\116\001\002\000\004" +
    "\040\100\001\002\000\032\003\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\043\uffe5\051\uffe5\001\002\000\004\040\060\001\002\000" +
    "\014\005\063\006\064\051\067\052\062\053\061\001\002" +
    "\000\010\041\ufff2\046\ufff2\050\ufff2\001\002\000\010\041" +
    "\ufff3\046\ufff3\050\ufff3\001\002\000\006\005\075\051\076" +
    "\001\002\000\006\041\uffd9\046\uffd9\001\002\000\006\041" +
    "\uffd7\046\uffd7\001\002\000\006\041\uffda\046\uffda\001\002" +
    "\000\006\041\uffd8\046\uffd8\001\002\000\006\041\072\046" +
    "\071\001\002\000\014\005\063\006\064\051\067\052\062" +
    "\053\061\001\002\000\004\050\073\001\002\000\032\003" +
    "\uffde\013\uffde\014\uffde\015\uffde\017\uffde\020\uffde\021\uffde" +
    "\023\uffde\024\uffde\025\uffde\043\uffde\051\uffde\001\002\000" +
    "\006\041\uffdb\046\uffdb\001\002\000\006\041\uffd5\046\uffd5" +
    "\001\002\000\004\005\077\001\002\000\006\041\uffd6\046" +
    "\uffd6\001\002\000\006\037\102\051\103\001\002\000\004" +
    "\041\114\001\002\000\006\041\uffbe\050\uffbe\001\002\000" +
    "\004\034\104\001\002\000\014\005\105\037\106\051\110" +
    "\052\062\053\061\001\002\000\006\005\111\051\112\001" +
    "\002\000\006\041\uffbd\050\uffbd\001\002\000\006\041\uffbc" +
    "\050\uffbc\001\002\000\006\041\uffbb\050\uffbb\001\002\000" +
    "\006\041\uffba\050\uffba\001\002\000\004\005\113\001\002" +
    "\000\006\041\uffb9\050\uffb9\001\002\000\004\042\031\001" +
    "\002\000\032\003\uffc6\013\uffc6\014\uffc6\015\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\023\uffc6\024\uffc6\025\uffc6\043\uffc6\051" +
    "\uffc6\001\002\000\014\003\124\026\126\035\122\036\125" +
    "\050\123\001\002\000\004\051\120\001\002\000\004\050" +
    "\121\001\002\000\032\003\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\023\uffd0\024\uffd0\025\uffd0\043" +
    "\uffd0\051\uffd0\001\002\000\006\052\062\053\061\001\002" +
    "\000\032\003\uffd4\013\uffd4\014\uffd4\015\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4\043\uffd4\051\uffd4" +
    "\001\002\000\004\050\132\001\002\000\004\050\131\001" +
    "\002\000\006\052\062\053\061\001\002\000\004\050\130" +
    "\001\002\000\032\003\uffd2\013\uffd2\014\uffd2\015\uffd2\017" +
    "\uffd2\020\uffd2\021\uffd2\023\uffd2\024\uffd2\025\uffd2\043\uffd2" +
    "\051\uffd2\001\002\000\032\003\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\043\uffd1\051\uffd1\001\002\000\032\003\uffc9\013\uffc9\014" +
    "\uffc9\015\uffc9\017\uffc9\020\uffc9\021\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\043\uffc9\051\uffc9\001\002\000\004\050\134\001" +
    "\002\000\032\003\uffd3\013\uffd3\014\uffd3\015\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\023\uffd3\024\uffd3\025\uffd3\043\uffd3\051" +
    "\uffd3\001\002\000\014\005\063\006\064\051\067\052\062" +
    "\053\061\001\002\000\006\041\137\046\071\001\002\000" +
    "\004\050\140\001\002\000\032\003\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\017\uffdf\020\uffdf\021\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\043\uffdf\051\uffdf\001\002\000\004\024\142\001\002" +
    "\000\004\040\143\001\002\000\006\037\102\051\103\001" +
    "\002\000\004\041\145\001\002\000\004\050\146\001\002" +
    "\000\032\003\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\020" +
    "\uffc5\021\uffc5\023\uffc5\024\uffc5\025\uffc5\043\uffc5\051\uffc5" +
    "\001\002\000\036\002\ufff5\003\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\043\ufff5\051\ufff5\001\002\000\032\003\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\017\uffe0\020\uffe0\021\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\043\uffe0\051\uffe0\001\002\000\004\050" +
    "\152\001\002\000\032\003\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1\025\uffe1\043" +
    "\uffe1\051\uffe1\001\002\000\006\037\102\051\103\001\002" +
    "\000\004\041\155\001\002\000\004\042\031\001\002\000" +
    "\034\003\uffc8\013\uffc8\014\uffc8\015\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\157\023\uffc8\024\uffc8\025\uffc8\043\uffc8\051" +
    "\uffc8\001\002\000\004\042\031\001\002\000\032\003\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\017\uffc7\020\uffc7\021\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\043\uffc7\051\uffc7\001\002\000\006" +
    "\026\163\035\162\001\002\000\006\005\174\006\175\001" +
    "\002\000\006\005\164\006\165\001\002\000\006\005\167" +
    "\051\170\001\002\000\004\050\166\001\002\000\032\003" +
    "\uffce\013\uffce\014\uffce\015\uffce\017\uffce\020\uffce\021\uffce" +
    "\023\uffce\024\uffce\025\uffce\043\uffce\051\uffce\001\002\000" +
    "\004\050\173\001\002\000\004\005\171\001\002\000\004" +
    "\050\172\001\002\000\032\003\uffcc\013\uffcc\014\uffcc\015" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\043\uffcc\051\uffcc\001\002\000\032\003\uffca\013\uffca\014" +
    "\uffca\015\uffca\017\uffca\020\uffca\021\uffca\023\uffca\024\uffca" +
    "\025\uffca\043\uffca\051\uffca\001\002\000\006\005\177\051" +
    "\200\001\002\000\004\050\176\001\002\000\032\003\uffcf" +
    "\013\uffcf\014\uffcf\015\uffcf\017\uffcf\020\uffcf\021\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\043\uffcf\051\uffcf\001\002\000\004" +
    "\050\203\001\002\000\004\005\201\001\002\000\004\050" +
    "\202\001\002\000\032\003\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\023\uffcd\024\uffcd\025\uffcd\043" +
    "\uffcd\051\uffcd\001\002\000\032\003\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\017\uffcb\020\uffcb\021\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\043\uffcb\051\uffcb\001\002\000\006\005\205\051\206" +
    "\001\002\000\006\005\uffb5\051\211\001\002\000\004\041" +
    "\207\001\002\000\004\050\210\001\002\000\032\003\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\017\uffb7\020\uffb7\021\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\043\uffb7\051\uffb7\001\002\000\004" +
    "\005\uffb6\001\002\000\004\005\213\001\002\000\004\041" +
    "\214\001\002\000\004\050\215\001\002\000\032\003\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\017\uffb8\020\uffb8\021\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\043\uffb8\051\uffb8\001\002\000\016" +
    "\005\063\006\064\041\217\051\067\052\062\053\061\001" +
    "\002\000\004\050\223\001\002\000\006\041\221\046\071" +
    "\001\002\000\004\050\222\001\002\000\032\003\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\043\uffdd\051\uffdd\001\002\000\032\003" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\043\uffdc\051\uffdc\001\002\000" +
    "\032\003\uffea\013\uffea\014\uffea\015\uffea\017\uffea\020\uffea" +
    "\021\uffea\023\uffea\024\uffea\025\uffea\043\uffea\051\uffea\001" +
    "\002\000\032\003\ufff1\013\ufff1\014\ufff1\015\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\023\ufff1\024\ufff1\025\ufff1\043\ufff1\051" +
    "\ufff1\001\002\000\032\003\uffee\013\uffee\014\uffee\015\uffee" +
    "\017\uffee\020\uffee\021\uffee\023\uffee\024\uffee\025\uffee\043" +
    "\uffee\051\uffee\001\002\000\032\003\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\017\ufff0\020\ufff0\021\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\043\ufff0\051\ufff0\001\002\000\036\002\ufff6\003\ufff6" +
    "\013\ufff6\014\ufff6\015\ufff6\017\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\025\ufff6\043\ufff6\051\ufff6\001\002" +
    "\000\032\003\uffec\013\uffec\014\uffec\015\uffec\017\uffec\020" +
    "\uffec\021\uffec\023\uffec\024\uffec\025\uffec\043\uffec\051\uffec" +
    "\001\002\000\032\003\uffe8\013\uffe8\014\uffe8\015\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\023\uffe8\024\uffe8\025\uffe8\043\uffe8" +
    "\051\uffe8\001\002\000\032\003\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\043\uffe4\051\uffe4\001\002\000\004\043\236\001\002\000" +
    "\032\003\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\023\uffe6\024\uffe6\025\uffe6\043\uffe6\051\uffe6\001" +
    "\002\000\036\002\ufff4\003\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025" +
    "\ufff4\043\ufff4\051\ufff4\001\002\000\006\017\241\051\242" +
    "\001\002\000\004\041\266\001\002\000\004\051\257\001" +
    "\002\000\004\026\243\001\002\000\006\052\062\053\061" +
    "\001\002\000\004\050\245\001\002\000\006\037\102\051" +
    "\103\001\002\000\004\050\247\001\002\000\006\036\251" +
    "\051\252\001\002\000\004\041\uffc2\001\002\000\004\051" +
    "\256\001\002\000\006\035\253\036\254\001\002\000\006" +
    "\052\062\053\061\001\002\000\004\041\uffc0\001\002\000" +
    "\004\041\uffc1\001\002\000\004\041\uffbf\001\002\000\004" +
    "\026\260\001\002\000\006\052\062\053\061\001\002\000" +
    "\004\050\262\001\002\000\006\037\102\051\103\001\002" +
    "\000\004\050\264\001\002\000\006\036\251\051\252\001" +
    "\002\000\004\041\uffc3\001\002\000\004\042\031\001\002" +
    "\000\032\003\uffc4\013\uffc4\014\uffc4\015\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\023\uffc4\024\uffc4\025\uffc4\043\uffc4\051\uffc4" +
    "\001\002\000\004\040\271\001\002\000\004\041\272\001" +
    "\002\000\004\042\031\001\002\000\006\002\ufff8\043\ufff8" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\012\002\007\015\011\016\012\017\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\015\017\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\031" +
    "\001\001\000\024\003\035\004\034\006\037\007\041\010" +
    "\033\011\044\012\055\020\045\023\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\224\006\225\007\230\010\223\011\231" +
    "\012\234\020\232\023\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\150\001\001\000\002" +
    "\001\001\000\004\026\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\022\064\024\067\025\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\064\025\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\064\024\135" +
    "\025\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\153\001\001\000" +
    "\002\001\001\000\004\026\155\001\001\000\002\001\001" +
    "\000\004\026\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\064\024\217\025\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\243\001\001\000\002\001\001\000\004\013\245" +
    "\001\001\000\002\001\001\000\004\005\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\260\001\001" +
    "\000\002\001\001\000\004\013\262\001\001\000\002\001" +
    "\001\000\004\005\264\001\001\000\002\001\001\000\004" +
    "\026\266\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\272\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private List<Symbol> errors = new ArrayList<>();
    
    public void syntax_error(Symbol s) {
        errors.add(s);
        // Recuperación básica: buscar el siguiente punto y coma
        System.err.println("Error sintáctico en línea " + (s.right + 1) + ", columna " + (s.left + 1) + ": " + s.value);
    }
    
    public void unrecovered_syntax_error(Symbol s) throws Exception {
        // No lanzar excepción, permitir que continúe
        System.err.println("Error grave de sintaxis en línea " + (s.right + 1));
    }
    
    public List<Symbol> getErrors() {
        return errors;
    }
    
    public void clearErrors() {
        errors.clear();
    }
    
    public static boolean esFlotante(String lex) {
        return lex.contains(".");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CADENA_OPT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_OPT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CADENA_OPT ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_OPT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PRINT_SENT ::= Print Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT_SENT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PRINT_SENT ::= Print Parentesis_a Comillas CADENA_OPT Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT_SENT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional VALOR_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION_FOR ::= Identificador Op_atribucion VALOR_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_FOR ::= Identificador Igual VALOR_NUMERICO P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_FOR ::= TIPO_DATO Identificador Igual VALOR_NUMERICO P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DO_WHILE ::= Do BLOQUE While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c BLOQUE Else BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= TIPO_DATO Identificador error P_coma 
            {
              Object RESULT =null;
		 System.err.println("Declaración con error"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Cadena Identificador Igual Cadena_texto P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Cadena Identificador Op_atribucion Cadena_texto P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= TIPO_DATO Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= TIPO_DATO Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= TIPO_DATO Identificador Igual VALOR_NUMERICO P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= TIPO_DATO Identificador Op_atribucion VALOR_NUMERICO P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= TIPO_DATO Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ARGUMENTO ::= Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARGUMENTO ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARGUMENTO ::= VALOR_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARGUMENTO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARGUMENTO ::= Cadena_texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARGUMENTOS ::= ARGUMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ARGUMENTOS ::= ARGUMENTOS Coma ARGUMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LLAMADA_FUNCION ::= Identificador Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LLAMADA_FUNCION ::= Identificador Parentesis_a ARGUMENTOS Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LLAMADA_FUNCION ::= Scanf Parentesis_a ARGUMENTOS Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LLAMADA_FUNCION ::= Printf Parentesis_a ARGUMENTOS Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= error P_coma 
            {
              Object RESULT =null;
		 System.err.println("Sentencia con error, continuando..."); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= Return VALOR_NUMERICO P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= PRINT_SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA PRINT_SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VALOR_NUMERICO ::= Numero_decimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_NUMERICO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VALOR_NUMERICO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_NUMERICO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOQUE ::= Llave_a SENTENCIA error Llave_c 
            {
              Object RESULT =null;
		 System.err.println("Falta llave de cierre?"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLOQUE ::= Llave_a error Llave_c 
            {
              Object RESULT =null;
		 System.err.println("Error en bloque corregido"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BLOQUE ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // METODO ::= TIPO_DATO MAIN_T Parentesis_a Parentesis_c BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // METODO ::= Void Identificador Parentesis_a Parentesis_c BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CLASE ::= CLASS_T Identificador Llave_a METODO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTS ::= Include Libreria 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTS ::= IMPORTS Include Libreria 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= IMPORTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= CLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= IMPORTS METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= IMPORTS CLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

