package codigo;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

parser code
{:
    private List<Symbol> errors = new ArrayList<>();
    
    public void syntax_error(Symbol s) {
        errors.add(s);
        // Recuperación básica: buscar el siguiente punto y coma
        System.err.println("Error sintáctico en línea " + (s.right + 1) + ", columna " + (s.left + 1) + ": " + s.value);
    }
    
    public void unrecovered_syntax_error(Symbol s) throws Exception {
        // No lanzar excepción, permitir que continúe
        System.err.println("Error grave de sintaxis en línea " + (s.right + 1));
    }
    
    public List<Symbol> getErrors() {
        return errors;
    }
    
    public void clearErrors() {
        errors.clear();
    }
    
    public static boolean esFlotante(String lex) {
        return lex.contains(".");
    }
:};

terminal Linea, Comillas, Cadena_texto, Include, Libreria, CLASS_T, Void, 
         Print, Printf, Scanf, Return,
         TIPO_DATO, Cadena, If, Else, Do, While, For,
         Igual, Suma, Resta, Multiplicacion, Division,
         Op_logico, Op_relacional, Op_atribucion, Op_incremento,
         Op_booleano, Parentesis_a, Parentesis_c,
         Llave_a, Llave_c, Corchete_a, Corchete_c,
         Coma, MAIN_T, P_coma, Identificador, Numero, Numero_decimal, ERROR;

non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
             WHILE, DO_WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR,
             IMPORTS, CLASE, METODO, PRINT_SENT, CADENA_OPT, VALOR_NUMERICO,
             LLAMADA_FUNCION, ARGUMENTOS, ARGUMENTO, BLOQUE;

start with INICIO;

INICIO ::= 
    IMPORTS CLASE |
    IMPORTS METODO |
    CLASE |
    METODO |
    IMPORTS
;

// IMPORTS
IMPORTS ::= 
    IMPORTS Include Libreria |
    Include Libreria
;

// CLASES Y MÉTODOS
CLASE ::= 
    CLASS_T Identificador Llave_a METODO Llave_c
;

METODO ::= 
    Void Identificador Parentesis_a Parentesis_c BLOQUE |
    TIPO_DATO MAIN_T Parentesis_a Parentesis_c BLOQUE
;

// BLOQUE para mejor manejo de errores
BLOQUE ::=
    Llave_a SENTENCIA Llave_c |
    Llave_a error Llave_c {: System.err.println("Error en bloque corregido"); :} |
    Llave_a SENTENCIA error Llave_c {: System.err.println("Falta llave de cierre?"); :}
;

// VALOR NUMÉRICO (entero o decimal)
VALOR_NUMERICO ::= 
    Numero |
    Numero_decimal
;

// SENTENCIAS con recuperación de errores
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    SENTENCIA LLAMADA_FUNCION |
    DECLARACION |
    SENTENCIA IF | IF |
    SENTENCIA IF_ELSE | IF_ELSE |
    SENTENCIA WHILE | WHILE |
    SENTENCIA DO_WHILE | DO_WHILE |
    SENTENCIA FOR | FOR |
    SENTENCIA PRINT_SENT | PRINT_SENT |
    LLAMADA_FUNCION |
    Return VALOR_NUMERICO P_coma |
    error P_coma {: System.err.println("Sentencia con error, continuando..."); :}
;

// LLAMADAS A FUNCIONES (printf, scanf, etc.)
LLAMADA_FUNCION ::=
    Printf Parentesis_a ARGUMENTOS Parentesis_c P_coma |
    Scanf Parentesis_a ARGUMENTOS Parentesis_c P_coma |
    Identificador Parentesis_a ARGUMENTOS Parentesis_c P_coma |
    Identificador Parentesis_a Parentesis_c P_coma
;

// ARGUMENTOS DE FUNCIONES
ARGUMENTOS ::=
    ARGUMENTOS Coma ARGUMENTO |
    ARGUMENTO
;

ARGUMENTO ::=
    Cadena_texto |
    Identificador |
    VALOR_NUMERICO |
    Comillas Identificador Comillas |
    Comillas Comillas
;

// DECLARACIONES con recuperación de errores
DECLARACION ::= 
    TIPO_DATO Identificador P_coma | 
    TIPO_DATO Identificador Op_atribucion VALOR_NUMERICO P_coma |
    TIPO_DATO Identificador Igual VALOR_NUMERICO P_coma |
    TIPO_DATO Identificador Op_incremento P_coma | 
    TIPO_DATO Op_incremento Identificador P_coma |
    Cadena Identificador Op_atribucion Cadena_texto P_coma |
    Cadena Identificador Igual Cadena_texto P_coma |
    Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma |
    Cadena Identificador Igual Comillas Identificador Comillas P_coma |
    Cadena Identificador Op_atribucion Comillas Comillas P_coma |
    Cadena Identificador Igual Comillas Comillas P_coma |
    TIPO_DATO Identificador error P_coma {: System.err.println("Declaración con error"); :}
;

// CONTROL DE FLUJO
IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c BLOQUE
;

IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c BLOQUE Else BLOQUE
;

WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c BLOQUE
;

DO_WHILE ::= Do BLOQUE While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma
;

FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c BLOQUE
;

SENTENCIA_FOR ::= 
    TIPO_DATO Identificador Igual VALOR_NUMERICO P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual VALOR_NUMERICO P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;

DECLARACION_FOR ::= 
    Identificador Op_atribucion VALOR_NUMERICO |
    Identificador Op_incremento | 
    Op_incremento Identificador
;

SENTENCIA_BOOLEANA ::= 
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional VALOR_NUMERICO |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Comillas Comillas |
    Identificador Op_relacional Comillas Identificador Comillas
;

// PRINT (mantener compatibilidad)
PRINT_SENT ::= 
    Print Parentesis_a Comillas CADENA_OPT Comillas Parentesis_c P_coma |
    Print Parentesis_a Identificador Parentesis_c P_coma
;

CADENA_OPT ::= Identificador | /* empty */ ;